// <auto-generated />
using System;
using Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dal.Migrations
{
    [DbContext(typeof(SchoolContext))]
    [Migration("20221219111406_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DomainModel.Classroom", b =>
                {
                    b.Property<int>("ClassroomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassroomID"), 1L, 1);

                    b.Property<string>("Corridor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("classname");

                    b.HasKey("ClassroomID");

                    b.ToTable("Classroom");
                });

            modelBuilder.Entity("DomainModel.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("PersonID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("DomainModel.Student", b =>
                {
                    b.HasBaseType("DomainModel.Person");

                    b.Property<double>("Average")
                        .HasColumnType("float");

                    b.Property<int>("ClassroomID")
                        .HasColumnType("int");

                    b.Property<bool>("IsClassDelegate")
                        .HasColumnType("bit");

                    b.HasIndex("ClassroomID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("DomainModel.Teacher", b =>
                {
                    b.HasBaseType("DomainModel.Person");

                    b.Property<int?>("ClassroomID")
                        .HasColumnType("int");

                    b.Property<string>("Discipline")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasIndex("ClassroomID")
                        .IsUnique()
                        .HasFilter("[ClassroomID] IS NOT NULL");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("DomainModel.Student", b =>
                {
                    b.HasOne("DomainModel.Classroom", "Classroom")
                        .WithMany("Students")
                        .HasForeignKey("ClassroomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModel.Person", null)
                        .WithOne()
                        .HasForeignKey("DomainModel.Student", "PersonID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("DomainModel.Teacher", b =>
                {
                    b.HasOne("DomainModel.Classroom", "Classroom")
                        .WithOne("Teacher")
                        .HasForeignKey("DomainModel.Teacher", "ClassroomID");

                    b.HasOne("DomainModel.Person", null)
                        .WithOne()
                        .HasForeignKey("DomainModel.Teacher", "PersonID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("DomainModel.Classroom", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teacher")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
